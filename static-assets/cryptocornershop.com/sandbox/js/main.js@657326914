(function ($) {
    "use strict";

    // Config 
    const domain = window.location.origin + "/sandbox/";
    const shop_product_img = domain + "/shop/p_imgs/";
    
    // Expose `domain` to the global scope (window object)
    window.domain = domain;
    window.shop_product_img = shop_product_img;


    // Spinner
    var spinner = function () {
        setTimeout(function () {
            if ($('#spinner').length > 0) {
                $('#spinner').removeClass('show');
            }
        }, 1);
    };
    spinner(0);


    // Fixed Navbar
    $(window).scroll(function () {
        if ($(window).width() < 992) {
            if ($(this).scrollTop() > 55) {
                $('.fixed-top').addClass('shadow');
            } else {
                $('.fixed-top').removeClass('shadow');
            }
        } else {
            if ($(this).scrollTop() > 55) {
                $('.fixed-top').addClass('shadow').css('top', -55);
            } else {
                $('.fixed-top').removeClass('shadow').css('top', 0);
            }
        } 
    });
    
    
   // Back to top button
   $(window).scroll(function () {
    if ($(this).scrollTop() > 300) {
        $('.back-to-top').fadeIn('slow');
    } else {
        $('.back-to-top').fadeOut('slow');
    }
    });
    $('.back-to-top').click(function () {
        $('html, body').animate({scrollTop: 0}, 1500, 'easeInOutExpo');
        return false;
    });


    // Testimonial carousel
    $(".testimonial-carousel").owlCarousel({
        autoplay: true,
        smartSpeed: 2000,
        center: false,
        dots: true,
        loop: true,
        margin: 25,
        nav : true,
        navText : [
            '<i class="bi bi-arrow-left"></i>',
            '<i class="bi bi-arrow-right"></i>'
        ],
        responsiveClass: true,
        responsive: {
            0:{
                items:1
            },
            576:{
                items:1
            },
            768:{
                items:1
            },
            992:{
                items:2
            },
            1200:{
                items:2
            }
        }
    });


    // vegetable carousel
    $(".vegetable-carousel").owlCarousel({
        autoplay: true,
        smartSpeed: 1500,
        center: false,
        dots: true,
        loop: true,
        margin: 25,
        nav : true,
        navText : [
            '<i class="bi bi-arrow-left"></i>',
            '<i class="bi bi-arrow-right"></i>'
        ],
        responsiveClass: true,
        responsive: {
            0:{
                items:1
            },
            576:{
                items:1
            },
            768:{
                items:2
            },
            992:{
                items:3
            },
            1200:{
                items:4
            }
        }
    });


    // Modal Video
    $(document).ready(function () {
        var $videoSrc;
        $('.btn-play').click(function () {
            $videoSrc = $(this).data("src");
        });
        // console.log($videoSrc);

        $('#videoModal').on('shown.bs.modal', function (e) {
            $("#video").attr('src', $videoSrc + "?autoplay=1&amp;modestbranding=1&amp;showinfo=0");
        })

        $('#videoModal').on('hide.bs.modal', function (e) {
            $("#video").attr('src', $videoSrc);
        })
    });



    // Product Quantity
    $('.quantity button').on('click', function () {
        var button = $(this);
        var oldValue = button.parent().parent().find('input').val();
        if (button.hasClass('btn-plus')) {
            var newVal = parseFloat(oldValue) + 1;
        } else {
            if (oldValue > 0) {
                var newVal = parseFloat(oldValue) - 1;
            } else {
                newVal = 0;
            }
        }
        button.parent().parent().find('input').val(newVal);
    });





    // Subscribe 
    $("#subscribeForm").on("submit", function(event) {
        event.preventDefault();
        
        var email = $("#email").val();
        var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;

        if (!emailPattern.test(email)) {
            // Display error message in the modal
            $("#modalMessage").html("Please enter a valid email address.");
            var myModal = new bootstrap.Modal(document.getElementById('responseModal'));
            myModal.show();
            return;
        }

        // Change button text to "Processing..."
        var $submitButton = $(this).find('button[type="submit"]');
        $submitButton.text('Processing...').prop('disabled', true);
        
        var subscribeUrl = document.getElementById('config').getAttribute('data-subscribe-url');
        
        $.ajax({
            url: subscribeUrl,
            type: "POST",
            data: { email: email },
            success: function(response) {
                $("#modalMessage").html(response);
                var myModal = new bootstrap.Modal(document.getElementById('responseModal'));
                myModal.show();

                // Change button text to "Subscribed"
                $submitButton.text('Subscribed');
                $("#email").prop('disabled', true);
            },
            error: function() {
                $("#modalMessage").html("An error occurred. Please try again.");
                var myModal = new bootstrap.Modal(document.getElementById('responseModal'));
                myModal.show();
            }
        });
    });
   


    // Add to Cart 
    $('#addtocart').on('click', function () {
        let button = $(this); // Store the clicked button reference
        let itemId = $(this).data('item');  // Get item_uniqid from data attribute
        let buyerId = $(this).data('buyer'); // Get buyer_uniqid from data attribute
        let maxQuantity = $(this).data('maxquantity'); // Max amount of item 
        let addQuantity = $(this).data('addquantity'); // Amount must add to cart

        // Start Loading only on clicked button
        button.html('<i class="fa fa-shopping-bag me-2"></i> Processing...').prop('disabled', true);

        addToCart(itemId, buyerId, maxQuantity, addQuantity);
    });


    // Update cart 
    updateCart();

})(jQuery);


// FUNCTIONS HERE 

// Add item to cart function 
function addToCart(itemUniqid, buyerUniqid, maxQuantity, addQuantity) {

    // Start Loading
    // $('#addtocart').html('<i class="fa fa-shopping-bag me-2"></i> Processing...').prop('disabled', true);


    fetch('../buyer/cart/cart_api.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            action: 'add_to_cart',
            item_uniqid: itemUniqid,
            buyer_uniqid: buyerUniqid,
            max_quantity: maxQuantity,
            add_quantity: addQuantity,
        })
    })
    .then(response => response.text())  // Change `.json()` to `.text()` to debug
    .then(text => {
        // console.log("Raw Response:", text); // Check if HTML is returned instead of JSON
        return JSON.parse(text);  // Manually parse JSON after verifying it's valid
    })
    .then(data => {
        if (data.success) {

            if(data.activity == 'added'){
                // alert(data.message);

                // Suppose data.message contains your custom message
                const message = data.message || "Default message";
                showToast('success', message);


            }
            if(data.activity == 'quantity-updated'){
                // alert(data.message);

                // Suppose data.message contains your custom message
                const message = data.message || "Default message";
                showToast('error', message);


            }


            // showToast('Item added to cart!');
            // updateCartCounter();

            updateCart();
            
        } else {
            // alert('Error: ' + data.message);
            const message = data.message || "Default message";
            showToast('error', message);
        }

        $('#addtocart').html('<i class="fa fa-shopping-bag me-2"></i> Add to Cart').prop('disabled', false);

    })
    .catch(error => console.error('Error:', error));
}


//  Toast 
function showToast(type, message) {
    // Ensure Bootstrap Icons CSS is loaded (only once)
    if (!document.querySelector('link[href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"]')) {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = 'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css';
      document.head.appendChild(link);
    }
  
    // Create toast container if it doesn't exist
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed top-50 start-50 translate-middle';
      toastContainer.style.zIndex = '1060';
      document.body.appendChild(toastContainer);
    }
  
    // Define toast properties based on type
    const toastId = type === 'success' ? 'successToast' : 'errorToast';
    const toastMsgId = type === 'success' ? 'successToastMsg' : 'errorToastMsg';
    const toastIcon = type === 'success' ? 'bi-check-circle-fill' : 'bi-x-circle-fill';
    const toastClass = type === 'success' ? 'success' : 'error';
  
    // Create toast HTML
    const toastHtml = `
      <div id="${toastId}" class="toast align-items-center border-0 shadow-lg custom-toast ${toastClass} mt-3" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body d-flex align-items-center fs-5">
            <i class="bi ${toastIcon} me-2 fs-4"></i>
            <span id="${toastMsgId}">${message}</span>
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    `;
  
    // Append toast to container
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
  
    // Add custom toast styles (only once)
    if (!document.querySelector('#custom-toast-styles')) {
      const style = document.createElement('style');
      style.id = 'custom-toast-styles';
      style.textContent = `
        .custom-toast {
          min-width: 400px;
          max-width: 600px;
          font-size: 1.25rem;
          padding: 1rem 1.5rem;
          color: white;
          opacity: 0.95;
        }
        .custom-toast.success {
          background-color: #28a745 !important; /* Green */
        }
        .custom-toast.error {
          background-color: #dc3545 !important; /* Red */
        }
      `;
      document.head.appendChild(style);
    }
  
    // Initialize and show toast
    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement);
    toast.show();
  
    // Remove toast and container when hidden
    toastElement.addEventListener('hidden.bs.toast', () => {
      toastElement.remove();
      if (!toastContainer.querySelector('.toast')) {
        toastContainer.remove();
      }
    });
  }
  



// Update Cart 
function updateCart() {
    $.ajax({
        url: domain + '/buyer/cart/cart_json.php',
        dataType: 'json',
        success: function(data) {
            if(data.success) {
                // Update cart count with max_items
                $('.dropdown span').text(data.max_items);
                
                // Clear existing items
                $('.cart-items-dropdown .cart-item').remove();
                
                if(data.cart.length === 0) {
                    // Show empty message
                    const emptyHtml = `
                    <li class="cart-item text-muted text-center py-2 d-flex justify-content-center align-items-center" style="min-height: 50px;">
                        No items found
                    </li>
                    `;
                    $('.cart-items-dropdown').prepend(emptyHtml);
                } else {
                    // Add new items
                    $.each(data.cart, function(index, item) {
                        const itemHtml = `
                            <li class="cart-item">
                            <img src="${shop_product_img + item.product_image}" alt="${item.product_name}">
                                <div class="cart-item-details">
                                    <p class="mb-1">${item.product_name}</p>
                                    <small class="text-muted">Quantity: ${item.item_quantity}</small>
                                </div>
                                <span class="text-muted">${item.price} USD</span>
                            </li>
                        `;
                        $('.cart-items-dropdown').prepend(itemHtml);
                    });
                }
            }
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // console.log("AJAX Error: " + textStatus + " - " + errorThrown);
        }
    });
}


function clearCart(buyer_uniqid) {
    console.log(buyer_uniqid);

            // Send AJAX request to PHP script
            fetch(domain + '/buyer/cart/remove_cart_item_all.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: 'buyerUniqid=' + encodeURIComponent(buyer_uniqid)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCart();
                } else {
                    console.error("Error removing item:", data.message);
                }
            })
            .catch(error => {
                console.error("Request failed:", error);
            });

}